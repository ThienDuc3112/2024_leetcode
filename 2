package main

func subarraysWithKDistinct(nums []int, k int) int {
    return atMost(nums, k) - atMost(nums, k - 1)
}

func atMost(nums []int, k int) int {
    leftIdx := 0
    res := 0
    freq := make(map[int]int)
    length := 0
    for rightIdx, right := range nums {
        if _, ok := freq[right]; !ok {
            freq[right] = 0
            length++
        }
        freq[right]++
        for length > k {
            freq[nums[leftIdx]]--
            if freq[nums[leftIdx]] == 0 {
                length--
            }
        }
        res += rightIdx - leftIdx + 1
    }
    return res
}
